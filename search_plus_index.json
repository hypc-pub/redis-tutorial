{"./":{"url":"./","title":"Redis简介","keywords":"","body":"Redis简介 Redis是一个开源，高级的键值存储和一个适用的解决方案，用于构建高性能，可扩展的Web应用程序。 Redis有三个主要特点，使它优越于其它键值数据存储系统： Redis将其数据库完全保存在内存中，仅使用磁盘进行持久化。 与其它键值数据存储相比，Redis有一组相对丰富的数据类型。 Redis可以将数据复制到任意数量的从机中。 Redis的优点 异常快 - Redis非常快，每秒可执行大约110000次的设置(SET)操作，每秒大约可执行81000次的读取/获取(GET)操作。 支持丰富的数据类型 - Redis支持开发人员常用的大多数数据类型，例如列表，集合，排序集和散列等等。这使得Redis很容易被用来解决各种问题，因为我们知道哪些问题可以更好使用地哪些数据类型来处理解决。 操作具有原子性 - 所有Redis操作都是原子操作，这确保如果两个客户端并发访问，Redis服务器能接收更新的值。 多实用工具 - Redis是一个多实用工具，可用于多种用例，如：缓存，消息队列(Redis本地支持发布/订阅)，应用程序中的任何短期数据，例如，web应用程序中的会话，网页命中计数等。 Redis与其他键值存储系统 Redis是键值数据库系统的不同进化路线，它的值可以包含更复杂的数据类型，可在这些数据类型上定义原子操作。 Redis是一个内存数据库，但在磁盘数据库上是持久的，因此它代表了一个不同的权衡，在这种情况下，在不能大于存储器(内存)的数据集的限制下实现非常高的写和读速度。 内存数据库的另一个优点是，它与磁盘上的相同数据结构相比，复杂数据结构在内存中存储表示更容易操作。 因此，Redis可以做很少的内部复杂性。 "},"base/redis-install.html":{"url":"base/redis-install.html","title":"Redis安装","keywords":"","body":"Redis安装 Ubuntu下安装 执行以下命令安装redis服务： $ sudo apt-get install -y redis-server $ sudo systemctl start redis-server.service 使用Docker运行redis $ docker run -dit -p 6379:6379 --name redis redis:latest $ docker logs -f redis 1:C 09 Jan 09:17:46.780 # Warning: no config file specified, using the default config. In order to specify a config file use redis-server /path/to/redis.conf _._ _.-``__ ''-._ _.-`` `. `_. ''-._ Redis 3.0.7 (00000000/0) 64 bit .-`` .-```. ```\\/ _.,_ ''-._ ( ' , .-` | `, ) Running in standalone mode |`-._`-...-` __...-.``-._|'` _.-'| Port: 6379 | `-._ `._ / _.-' | PID: 1 `-._ `-._ `-./ _.-' _.-' |`-._`-._ `-.__.-' _.-'_.-'| | `-._`-._ _.-'_.-' | http://redis.io `-._ `-._`-.__.-'_.-' _.-' |`-._`-._ `-.__.-' _.-'_.-'| | `-._`-._ _.-'_.-' | `-._ `-._`-.__.-'_.-' _.-' `-._ `-.__.-' _.-' `-._ _.-' `-.__.-' 1:M 09 Jan 09:17:46.784 # WARNING: The TCP backlog setting of 511 cannot be enforced because /proc/sys/net/core/somaxconn is set to the lower value of 128. 1:M 09 Jan 09:17:46.784 # Server started, Redis version 3.0.7 1:M 09 Jan 09:17:46.784 # WARNING overcommit_memory is set to 0! Background save may fail under low memory condition. To fix this issue add 'vm.overcommit_memory = 1' to /etc/sysctl.conf and then reboot or run the command 'sysctl vm.overcommit_memory=1' for this to take effect. 1:M 09 Jan 09:17:46.784 # WARNING you have Transparent Huge Pages (THP) support enabled in your kernel. This will create latency and memory usage issues with Redis. To fix this issue run the command 'echo never > /sys/kernel/mm/transparent_hugepage/enabled' as root, and add it to your /etc/rc.local in order to retain the setting after a reboot. Redis must be restarted after THP is disabled. 1:M 09 Jan 09:17:46.785 * The server is now ready to accept connections on port 6379 "},"base/redis-config.html":{"url":"base/redis-config.html","title":"Redis配置","keywords":"","body":"Redis配置 Redis的配置文件位于Redis安装目录下，文件名为redis.conf。 你可以通过CONFIG命令查看或设置配置项。 语法 127.0.0.1:6379> CONFIG GET CONFIG_SETTING_NAME 127.0.0.1:6379> CONFIG SET CONFIG_SETTING_NAME NEW_CONFIG_VALUE 示例 127.0.0.1:6379> CONFIG GET databases 1) \"databases\" 2) \"16\" 127.0.0.1:6379> CONFIG GET port 1) \"port\" 2) \"6379\" 127.0.0.1:6379> CONFIG SET loglevel \"notice\" OK 配置参数说明 "},"base/redis-cli.html":{"url":"base/redis-cli.html","title":"Redis命令行工具","keywords":"","body":"Redis命令行工具 Redis命令行工具是redis-cli，它主要用来连接服务，有时也用来检测服务是否存活。 常用命令如下： $ # 连接本地服务器 $ redis-cli $ # 连接远程服务 $ redis-cli -h 10.0.0.2 -p 6379 $ # 判断远程服务是否存活，如果存活将返回`PONG` $ redis-cli -h 10.0.0.2 -p 6379 ping PONG $ # 判断远程服务是否存活，如果服务不存在 $ redis-cli -h 10.0.0.2 -p 6379 ping Could not connect to Redis at 10.0.0.2:6379: Connection refused redis-cli详细参数如下： $ redis-cli --help redis-cli 3.0.6 Usage: redis-cli [OPTIONS] [cmd [arg [arg ...]]] -h Server hostname (default: 127.0.0.1). -p Server port (default: 6379). -s Server socket (overrides hostname and port). -a Password to use when connecting to the server. -r Execute specified command N times. -i When -r is used, waits seconds per command. It is possible to specify sub-second times like -i 0.1. -n Database number. -x Read last argument from STDIN. -d Multi-bulk delimiter in for raw formatting (default: \\n). -c Enable cluster mode (follow -ASK and -MOVED redirections). --raw Use raw formatting for replies (default when STDOUT is not a tty). --no-raw Force formatted output even when STDOUT is not a tty. --csv Output in CSV format. --stat Print rolling stats about server: mem, clients, ... --latency Enter a special mode continuously sampling latency. --latency-history Like --latency but tracking latency changes over time. Default time interval is 15 sec. Change it using -i. --latency-dist Shows latency as a spectrum, requires xterm 256 colors. Default time interval is 1 sec. Change it using -i. --lru-test Simulate a cache workload with an 80-20 distribution. --slave Simulate a slave showing commands received from the master. --rdb Transfer an RDB dump from remote server to local file. --pipe Transfer raw Redis protocol from stdin to server. --pipe-timeout In --pipe mode, abort with error if after sending all data. no reply is received within seconds. Default timeout: 30. Use 0 to wait forever. --bigkeys Sample Redis keys looking for big keys. --scan List all keys using the SCAN command. --pattern Useful with --scan to specify a SCAN pattern. --intrinsic-latency Run a test to measure intrinsic system latency. The test will run for the specified amount of seconds. --eval Send an EVAL command using the Lua script at . --help Output this help and exit. --version Output version and exit. Examples: cat /etc/passwd | redis-cli -x set mypasswd redis-cli get mypasswd redis-cli -r 100 lpush mylist x redis-cli -r 100 -i 1 info | grep used_memory_human: redis-cli --eval myscript.lua key1 key2 , arg1 arg2 arg3 redis-cli --scan --pattern '*:12345*' (Note: when using --eval the comma separates KEYS[] from ARGV[] items) When no command is given, redis-cli starts in interactive mode. Type \"help\" in interactive mode for information on available commands. "},"base/redis-gui.html":{"url":"base/redis-gui.html","title":"Redis GUI工具","keywords":"","body":"Redis GUI工具 Redis Desktop Manager（RedisDesktopManager，RDM）是一个快速、简单、支持跨平台的Redis桌面管理工具，基于Qt5开发，支持通过SSH Tunnel连接。 支持的平台 Windows7+ Mac OSX 10.10+ Ubuntu14.04 & Ubuntu16.04 Fedora CentOS OpenSUSE "},"base/redis-data-types.html":{"url":"base/redis-data-types.html","title":"Redis数据类型","keywords":"","body":"Redis数据类型 Redis支持5种数据类型。 字符串 Redis中的字符串是一个字节序列。Redis中的字符串是二进制安全的，这意味着它们的长度不由任何特殊的终止字符决定。因此，可以在一个字符串中存储高达512兆字节的任何内容。 127.0.0.1:6379> SET mykey redis OK 127.0.0.1:6379> GET mykey \"redis\" 散列/哈希 Redis散列/哈希(Hashes)是键值对的集合。Redis散列/哈希是字符串字段和字符串值之间的映射。因此，它们用于表示对象。 127.0.0.1:6379> HMSET ukey username \"admin\" password \"admin123\" points 200 每个散列/哈希可以存储多达 232−12^{32} - 12​32​​−1 个健-值对(超过40亿个)。 列表 Redis列表只是字符串列表，按插入顺序排序。您可以向Redis列表的头部或尾部添加元素。 127.0.0.1:6379> LPUSH mylist redis (integer) 1 127.0.0.1:6379> LPUSH mylist mongodb (integer) 2 127.0.0.1:6379> LPUSH mylist sqlite (integer) 3 127.0.0.1:6379> LRANGE mylist 0 10 1) \"sqlite\" 2) \"mongodb\" 3) \"redis\" 列表的最大长度为 232−12^{32} - 12​32​​−1 个元素(超过40亿个)。 集合 Redis集合是字符串的无序集合。在Redis中，您可以添加，删除和测试成员存在的时间O(1)复杂性。 127.0.0.1:6379> SADD myset redis (integer) 1 127.0.0.1:6379> SADD myset mongodb (integer) 1 127.0.0.1:6379> SADD myset sqlite (integer) 1 127.0.0.1:6379> SADD myset sqlite (integer) 0 127.0.0.1:6379> SMEMBERS myset 1) \"sqlite\" 2) \"mongodb\" 3) \"redis\" 一个集合中的最大成员数量为 232−12^{32} - 12​32​​−1 个。 可排序集合 Redis可排序集合类似于Redis集合，是不重复的字符集合。 不同之处在于，排序集合的每个成员都与分数相关联，这个分数用于按最小分数到最大分数来排序的排序集合。虽然成员是唯一的，但分数值可以重复。 127.0.0.1:6379> ZADD mykey 0 redis (integer) 1 127.0.0.1:6379> ZADD mykey 0 mongodb (integer) 1 127.0.0.1:6379> ZADD mykey 1 sqlite (integer) 1 127.0.0.1:6379> ZADD mykey 1 sqlite (integer) 0 127.0.0.1:6379> ZRANGEBYSCORE mykey 0 1000 1) \"mongodb\" 2) \"redis\" 3) \"sqlite\" "},"command/redis-key.html":{"url":"command/redis-key.html","title":"Redis健命令","keywords":"","body":"Redis健命令 Redis键命令用于管理Redis中的键。 Redis DEL命令 RedisDEL命令用于删除Redis中现有/存在的键。 语法 127.0.0.1:6379> DEL KEY_NAME 返回值 成功删除的键的数量。 示例 127.0.0.1:6379> SET my_key \"this is my key\" OK 127.0.0.1:6379> GET my_key \"this is my key\" 127.0.0.1:6379> DEL my_key (integer) 1 127.0.0.1:6379> GET my_key (nil) Redis Dump命令 RedisDUMP命令用于获取存储在Redis中指定键的数据的序列化版本。 语法 127.0.0.1:6379> DUMP KEY_NAME 返回值 序列化值(String)。 示例 127.0.0.1:6379> SET my_key \"redis\" OK 127.0.0.1:6379> DUMP my_key \"\\x00\\x05redis\\x06\\x00S\\xbd\\xc1q\\x17z\\x81\\xb2\" Redis Exists命令 RedisEXISTS命令用于检查键是否存在于Redis中。 语法 127.0.0.1:6379> EXISTS KEY_NAME 返回值 一个整数值: 如果键存在，返回1 如果键不存在，返回0 示例 127.0.0.1:6379> EXISTS my_key (integer) 0 127.0.0.1:6379> SET my_key \"redis\" OK 127.0.0.1:6379> EXISTS my_key (integer) 1 Redis Expire命令 RedisExpire命令用于设置键的到期时间。在到指定的到期时间后，在Redis中这个键将失效，不能再使用。 语法 127.0.0.1:6379> EXPIRE KEY_NAME TIME_IN_SECONDS 返回值 一个整数值: 如果成功地为该键设置了超时时间，返回1 如果键不存在或无法设置超时时间，返回0 示例 127.0.0.1:6379> SET my_key redis OK 127.0.0.1:6379> EXPIRE my_key 10 (integer) 1 Redis Expireat命令 RedisExpireat命令用于以Unix时间戳格式设置键的到期时间。 在到期时间后，键将在Redis中失效不可用。 语法 127.0.0.1:6379> EXPIREAT KEY_NAME TIME_IN_UNIX_TIMESTAMP 返回值 一个整数： 如果成功地为该键设置了超时时间，返回1 如果键不存在或无法设置超时时间，返回0 示例 127.0.0.1:6379> SET my_key redis OK 127.0.0.1:6379> EXPIREAT my_key 1516080509 (integer) 1 127.0.0.1:6379> EXISTS my_key (integer) 0 127.0.0.1:6379> SET my_key redis OK 127.0.0.1:6379> EXPIREAT my_key 1616080509 (integer) 1 127.0.0.1:6379> EXISTS my_key (integer) 1 Redis Pexpire命令 RedisPexpire命令用于以毫秒为单位来设置键的到期时间。 在到期时间后，键将在Redis中失效不可用。 语法 127.0.0.1:6379> PEXPIRE KEY_NAME TIME_IN_MILLISECONDS 返回值 一个整数： 如果成功地为该键设置了超时时间，返回1 如果键不存在或无法设置超时时间，返回0 示例 127.0.0.1:6379> SET my_key redis OK 127.0.0.1:6379> PEXPIRE my_key 5000 (integer) 1 Redis Pexpireat命令 RedisPexpireat命令用于以毫秒为单位指定unix时间戳来设置键的到期时间。在到期时间后，键将在Redis中失效不可用。 语法 127.0.0.1:6379> PEXPIREAT KEY_NAME TIME_IN_MILLISECONDS_IN_UNIX_TIMESTAMP 返回值 一个整数： 如果成功地为该键设置了超时时间，返回1 如果键不存在或无法设置超时时间，返回0 示例 127.0.0.1:6379> SET my_key redis OK 127.0.0.1:6379> PEXPIREAT my_key 1516080509 (integer) 1 127.0.0.1:6379> EXISTS my_key (integer) 0 127.0.0.1:6379> SET my_key redis OK 127.0.0.1:6379> PEXPIREAT my_key 1616080509 (integer) 1 127.0.0.1:6379> EXISTS my_key (integer) 1 Redis KEYS 命令 RedisKEYS命令用于搜索具有匹配模式的键。 语法 127.0.0.1:6379> KEYS PATTERN 返回值 具有匹配模式的键列表(Array)。 示例 127.0.0.1:6379> SET mykey1 \"redis\" OK 127.0.0.1:6379> SET mykey2 \"mysql\" OK 127.0.0.1:6379> SET mykey3 \"mongodb\" OK 127.0.0.1:6379> KEYS mykey* 1) \"mykey2\" 2) \"mykey1\" 3) \"mykey3\" Redis Move命令 RedisMOVE命令用于将键从当前选定的数据库移动到指定的目标数据库中。 语法 127.0.0.1:6379> MOVE KEY_NAME DESTINATION_DATABASE 返回值 一个整数： 如果键移动失败，则返回0 如果键移动成功，则返回1 示例 127.0.0.1:6379> SET mykey \"redis\" OK 127.0.0.1:6379> get mykey \"redis\" 127.0.0.1:6379> MOVE mykey 2 (integer) 1 127.0.0.1:6379> get mykey (nil) Redis Persist命令 RedisPERSIST命令用于删除键所指定的过期时间。 语法 127.0.0.1:6379> PERSIST KEY_NAME 返回值 一个整数： 如果键的过期时间删除成功，则返回1 如果键的过期时间删除失败，则返回0 示例 127.0.0.1:6379> EXPIRE mykey 60 (integer) 1 127.0.0.1:6379> TTL mykey (integer) 56 127.0.0.1:6379> PERSIST mykey (integer) 1 127.0.0.1:6379> TTL mykey (integer) -1 Redis Pttl命令 RedisPTTL命令用于获取键到过期的剩余时间(以毫秒为单位)。 语法 127.0.0.1:6379> PTTL KEY_NAME 返回值 整数值TTL(以毫秒为单位)或负值： TTL的时间值(以毫秒为单位) 如果键的没有过期时间，则返回0 如果键不存在，则返回-1 示例 127.0.0.1:6379> SET mykey \"redis\" OK 127.0.0.1:6379> EXPIRE mykey 1000 (integer) 1 127.0.0.1:6379> PTTL mykey (integer) 996230 Redis Ttl命令 RedisTTL命令以秒为单位返回key的剩余过期时间。 语法 127.0.0.1:6379> TTL KEY_NAME 返回值 一个整数 当key不存在时，返回-2 当key存在但没有设置剩余生存时间时，返回-1 否则，以秒为单位，返回key的剩余生存时间 示例 127.0.0.1:6379> FLUSHDB OK 127.0.0.1:6379> TTL mykey (integer) -2 127.0.0.1:6379> SET mykey redis OK 127.0.0.1:6379> TTL key (integer) -1 127.0.0.1:6379> EXPIRE mykey 100 (integer) 1 127.0.0.1:6379> TTL key (integer) 96 Redis Randomkey命令 RedisRANDOMKEY命令用来获取Redis数据库的随机键。 语法 127.0.0.1:6379> RANDOMKEY 返回值 一个随机键(字符串)或nil，如果数据库是空的。 示例 127.0.0.1:6379> SET mykey1 \"redis\" OK 127.0.0.1:6379> SET mykey2 \"mysql\" OK 127.0.0.1:6379> SET mykey3 \"mongodb\" OK 127.0.0.1:6379> RANDOMKEY mykey2 Redis Rename命令 RedisRENAME命令用于更改键的名称。 语法 127.0.0.1:6379> RENAME OLD_KEY_NAME NEW_KEY_NAME 返回值 一个字符串，OK或error 示例 127.0.0.1:6379> SET mykey1 \"redis\" OK 127.0.0.1:6379> SET mykey2 \"mysql\" OK 127.0.0.1:6379> SET mykey3 \"mongodb\" OK 127.0.0.1:6379> RENAME mykey2 new-mykey2 \"OK\" 127.0.0.1:6379> GET new-mykey2 \"mysql\" Redis Renamenx命令 RedisRENAMENX命令用于更改键的名称(如果新键不存在)。 语法 127.0.0.1:6379> RENAMENX OLD_KEY_NAME NEW_KEY_NAME 返回值 一个整数： 如果键被重命名为新键，则返回1 如果键已经存在，则返回0 示例 127.0.0.1:6379> SET mykey1 \"redis\" OK 127.0.0.1:6379> SET mykey2 \"mysql\" OK 127.0.0.1:6379> SET mykey3 \"mongodb\" OK 127.0.0.1:6379> RENAMENX mykey1 new-mykey (integer) 1 127.0.0.1:6379> RENAMENX mykey2 new-mykey (integer) 0 127.0.0.1:6379> get new-mykey \"redis\" Redis Type命令 RedisTYPE命令用于获取存储在键中的值的数据类型。 语法 127.0.0.1:6379> TYPE KEY_NAME 返回值 返回一个字符串，它是存储在键中的值的数据类型或none。 示例 127.0.0.1:6379> SET mykey \"redis\" OK 127.0.0.1:6379> TYPE mykey string 127.0.0.1:6379> TYPE mykey2 none "},"command/redis-string.html":{"url":"command/redis-string.html","title":"Redis字符串命令","keywords":"","body":"Redis字符串命令 Redis字符串数据类型的相关命令用于管理redis字符串值。 Redis SET命令 RedisSET命令用于设置给定key的值。如果key已经存储其他值，SET就覆写旧值，且无视类型。 语法 127.0.0.1:6379> SET KEY_NAME VALUE 返回值 在设置操作成功完成时，返回OK 示例 127.0.0.1:6379> SET mykey redis OK 127.0.0.1:6379> GET mykey \"redis\" Redis GET命令 RedisGet命令用于获取指定key的值。如果key不存在，返回nil。如果key储存的值不是字符串类型，返回一个错误。 语法 127.0.0.1:6379> GET KEY_NAME 返回值 返回key的值，如果key不存在时，返回nil 如果key不是字符串类型，那么返回一个错误 示例 127.0.0.1:6379> GET mykey (nil) 127.0.0.1:6379> SET mykey redis OK 127.0.0.1:6379> GET mykey \"redis\" 127.0.0.1:6379> LPUSH db redis mongodb mysql (integer) 3 127.0.0.1:6379> GET db (error) ERR Operation against a key holding the wrong kind of value Redis Getrange命令 RedisGetrange命令用于获取存储在指定key中字符串的子字符串。字符串的截取范围由start和end两个偏移量决定(包括start和end在内)。 语法 127.0.0.1:6379> GETRANGE KEY_NAME start end 返回值 截取得到的子字符串 示例 127.0.0.1:6379> SET mykey \"This is my test key\" OK 127.0.0.1:6379> GETRANGE mykey 0 3 \"This\" 127.0.0.1:6379> GETRANGE mykey 0 -1 \"This is my test key\" Redis Getset命令 RedisGetset命令用于设置指定key的值，并返回key的旧值。 语法 127.0.0.1:6379> GETSET KEY_NAME VALUE 返回值 返回给定key的旧值 当key没有旧值时，即key不存在时，返回nil 当key存在但不是字符串类型时，返回一个错误 示例 127.0.0.1:6379> GETSET mykey redis (nil) 127.0.0.1:6379> GET mykey \"redis\" 127.0.0.1:6379> GETSET mykey redis2 \"redis\" 127.0.0.1:6379> GET mykey \"redis2\" Redis Getbit命令 RedisGetbit命令用于对key所储存的字符串值，获取指定偏移量上的位(bit)。 语法 127.0.0.1:6379> GETBIT KEY_NAME OFFSET 返回值 字符串值指定偏移量上的位(bit)。 当偏移量OFFSET比字符串值的长度大，或者key不存在时，返回0 示例 127.0.0.1:6379> EXISTS bit (integer) 0 127.0.0.1:6379> GETBIT bit 100 (integer) 0 127.0.0.1:6379> SETBIT bit 100 1 (integer) 0 127.0.0.1:6379> GETBIT bit 100 (integer) 1 Redis Mget命令 RedisMget命令返回所有(一个或多个)给定key的值。 如果给定的key里面，有某个key不存在，那么这个key返回特殊值nil。 语法 127.0.0.1:6379> MGET KEY1 KEY2 .. KEYN 返回值 一个包含所有给定key的值的列表 示例 127.0.0.1:6379> SET key1 \"hello\" OK 127.0.0.1:6379> SET key2 \"world\" OK 127.0.0.1:6379> MGET key1 key2 key3 1) \"Hello\" 2) \"World\" 3) (nil) Redis Setbit命令 RedisSetbit命令用于对key所储存的字符串值，设置或清除指定偏移量上的位(bit)。 语法 127.0.0.1:6379> SETBIT KEY_NAME OFFSET 返回值 指定偏移量原来储存的位 示例 127.0.0.1:6379> SETBIT bit 100 1 (integer) 0 127.0.0.1:6379> GETBIT bit 100 (integer) 1 127.0.0.1:6379> GETBIT bit 10 (integer) 0 Redis Setex命令 RedisSetex命令为指定的key设置值及其过期时间。如果key已经存在，SETEX命令将会替换旧的值。 语法 127.0.0.1:6379> SETEX KEY_NAME TIMEOUT VALUE 返回值 设置成功时返回OK 示例 127.0.0.1:6379> SETEX mykey 60 redis OK 127.0.0.1:6379> TTL mykey 59 127.0.0.1:6379> GET mykey \"redis\" Redis Setnx命令 RedisSetnx（SET if Not eXists）命令在指定的key不存在时，为key设置指定的值。 语法 127.0.0.1:6379> SETNX KEY_NAME VALUE 返回值 设置成功，返回1 设置失败，返回0 示例 127.0.0.1:6379> EXISTS job (integer) 0 127.0.0.1:6379> SETNX job \"programmer\" (integer) 1 127.0.0.1:6379> SETNX job \"code-farmer\" (integer) 0 127.0.0.1:6379> GET job \"programmer\" Redis Setrange命令 RedisSetrange命令用指定的字符串覆盖给定key所储存的字符串值，覆盖的位置从偏移量OFFSET开始。 语法 127.0.0.1:6379> SETRANGE KEY_NAME OFFSET VALUE 返回值 被修改后的字符串长度 示例 127.0.0.1:6379> SET key1 \"Hello World\" OK 127.0.0.1:6379> SETRANGE key1 6 \"Redis\" (integer) 11 127.0.0.1:6379> GET key1 \"Hello Redis\" Redis Strlen命令 RedisStrlen命令用于获取指定key所储存的字符串值的长度。当key储存的不是字符串值时，返回一个错误。 语法 127.0.0.1:6379> STRLEN KEY_NAME 返回值 字符串值的长度。 当 key 不存在时，返回 0 示例 127.0.0.1:6379> SET mykey \"Hello world\" OK 127.0.0.1:6379> STRLEN mykey (integer) 11 127.0.0.1:6379> STRLEN nonexisting (integer) 0 Redis Mset命令 RedisMset命令用于同时设置一个或多个key-value对。 语法 127.0.0.1:6379> MSET key1 value1 key2 value2 .. keyN valueN 返回值 总是返回OK 示例 127.0.0.1:6379> MSET key1 \"Hello\" key2 \"World\" OK 127.0.0.1:6379> GET key1 \"Hello\" 127.0.0.1:6379> GET key2 \"World\" Redis Msetnx命令 RedisMsetnx命令用于所有给定key都不存在时，同时设置一个或多个key-value对。 语法 127.0.0.1:6379> MSETNX key1 value1 key2 value2 .. keyN valueN 返回值 当所有key都成功设置，返回1 如果所有给定key都设置失败(至少有一个 key 已经存在)，那么返回0 示例 127.0.0.1:6379> MSETNX rmdbs \"MySQL\" nosql \"MongoDB\" key-value-store \"redis\" (integer) 1 127.0.0.1:6379> MGET rmdbs nosql key-value-store 1) \"MySQL\" 2) \"MongoDB\" 3) \"redis\" 127.0.0.1:6379> MSETNX rmdbs \"Sqlite\" language \"python\" (integer) 0 127.0.0.1:6379> EXISTS language (integer) 0 127.0.0.1:6379> GET rmdbs \"MySQL\" Redis Psetex命令 RedisPsetex命令以毫秒为单位设置key的生存时间。 语法 127.0.0.1:6379> PSETEX key1 EXPIRY_IN_MILLISECONDS value1 返回值 设置成功时返回OK 示例 127.0.0.1:6379> PSETEX mykey 1000 \"Hello\" OK 127.0.0.1:6379> PTTL mykey 999 127.0.0.1:6379> GET mykey \"Hello\" Redis Incr命令 RedisIncr命令将key中储存的数字值增一。 如果key不存在，那么key的值会先被初始化为0，然后再执行INCR操作。 如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。 本操作的值限制在64位(bit)有符号数字表示之内。 语法 127.0.0.1:6379> INCR KEY_NAME 返回值 执行 INCR 命令之后 key 的值 示例 127.0.0.1:6379> SET i 20 OK 127.0.0.1:6379> INCR i (integer) 21 127.0.0.1:6379> GET i \"21\" Redis Incrby命令 RedisIncrby命令将key中储存的数字加上指定的增量值。 如果key不存在，那么key的值会先被初始化为0，然后再执行INCRBY命令。 如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。 本操作的值限制在64位(bit)有符号数字表示之内。 语法 127.0.0.1:6379> INCRBY KEY_NAME INCR_AMOUNT 返回值 加上指定的增量值之后，key的值 示例 127.0.0.1:6379> SET rank 50 OK 127.0.0.1:6379> INCRBY rank 20 (integer) 70 127.0.0.1:6379> GET rank \"70\" 127.0.0.1:6379> EXISTS counter (integer) 0 127.0.0.1:6379> INCRBY counter 30 (integer) 30 127.0.0.1:6379> GET counter \"30\" 127.0.0.1:6379> SET book \"long long ago...\" OK 127.0.0.1:6379> INCRBY book 200 (error) ERR value is not an integer or out of range Redis Incrbyfloat命令 RedisIncrbyfloat命令为key中所储存的值加上指定的浮点数增量值。 如果key不存在，那么INCRBYFLOAT会先将key的值设为0，再执行加法操作。 语法 127.0.0.1:6379> INCRBYFLOAT KEY_NAME INCR_AMOUNT 返回值 执行命令之后key的值 示例 127.0.0.1:6379> SET mykey 10.50 OK 127.0.0.1:6379> INCRBYFLOAT mykey 0.1 \"10.6\" 127.0.0.1:6379> SET mykey 314e-2 OK 127.0.0.1:6379> GET mykey \"314e-2\" 127.0.0.1:6379> INCRBYFLOAT mykey 0 \"3.14\" 127.0.0.1:6379> SET mykey 3 OK 127.0.0.1:6379> INCRBYFLOAT mykey 1.1 \"4.1\" 127.0.0.1:6379> SET mykey 3.0 OK 127.0.0.1:6379> GET mykey \"3.0\" 127.0.0.1:6379> INCRBYFLOAT mykey 1.000000000000000000000 \"4\" 127.0.0.1:6379> GET mykey \"4\" Redis Decr命令 RedisDecr命令将key中储存的数字值减一。 如果key不存在，那么key的值会先被初始化为0，然后再执行DECR操作。 如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。 本操作的值限制在64位(bit)有符号数字表示之内。 语法 127.0.0.1:6379> DECR KEY_NAME 返回值 执行命令之后key的值 示例 127.0.0.1:6379> SET failure_times 10 OK 127.0.0.1:6379> DECR failure_times (integer) 9 127.0.0.1:6379> EXISTS count (integer) 0 127.0.0.1:6379> DECR count (integer) -1 127.0.0.1:6379> SET company YOUR_CODE_SUCKS.LLC OK 127.0.0.1:6379> DECR company (error) ERR value is not an integer or out of range Redis Decrby命令 RedisDecrby命令将key所储存的值减去指定的减量值。 如果key不存在，那么key的值会先被初始化为0，然后再执行DECRBY操作。 如果值包含错误的类型，或字符串类型的值不能表示为数字，那么返回一个错误。 本操作的值限制在64位(bit)有符号数字表示之内。 语法 127.0.0.1:6379> DECRBY KEY_NAME DECREMENT_AMOUNT 返回值 减去指定减量值之后，key的值 示例 127.0.0.1:6379> SET count 100 OK 127.0.0.1:6379> DECRBY count 20 (integer) 80 127.0.0.1:6379> EXISTS pages (integer) 0 127.0.0.1:6379> DECRBY pages 10 (integer) -10 Redis Append命令 RedisAppend命令用于为指定的key追加值。 如果key已经存在并且是一个字符串，APPEND命令将value追加到key原来的值的末尾。 如果key不存在，APPEND就简单地将给定key设为value，就像执行SET key value一样。 语法 127.0.0.1:6379> APPEND KEY_NAME NEW_VALUE 返回值 追加指定值之后，key中字符串的长度 示例 127.0.0.1:6379> EXISTS myphone (integer) 0 127.0.0.1:6379> APPEND myphone \"nokia\" (integer) 5 127.0.0.1:6379> APPEND myphone \" - 1110\" (integer) 12 127.0.0.1:6379> GET myphone \"nokia - 1110\" "},"command/redis-hash.html":{"url":"command/redis-hash.html","title":"Redis哈希命令","keywords":"","body":"Redis哈希命令 Redis hash是一个string类型的field和value的映射表，hash特别适合用于存储对象。 Redis 中每个 hash 可以存储 232−12^{32} - 12​32​​−1 键值对（40多亿）。 Redis Hdel命令 RedisHdel命令用于删除哈希表key中的一个或多个指定字段，不存在的字段将被忽略。 语法 127.0.0.1:6379> HDEL KEY_NAME FIELD1.. FIELDN 返回值 被成功删除字段的数量，不包括被忽略的字段 示例 127.0.0.1:6379> HSET myhash field1 \"foo\" (integer) 1 127.0.0.1:6379> HDEL myhash field1 (integer) 1 127.0.0.1:6379> HDEL myhash field2 (integer) 0 Redis Hexists命令 RedisHexists命令用于查看哈希表的指定字段是否存在。 语法 127.0.0.1:6379> HEXISTS KEY_NAME FIELD_NAME 返回值 如果哈希表含有给定字段，返回1 如果哈希表不含有给定字段，或key不存在，返回0 示例 127.0.0.1:6379> HSET myhash field1 \"foo\" (integer) 1 127.0.0.1:6379> HEXISTS myhash field1 (integer) 1 127.0.0.1:6379> HEXISTS myhash field2 (integer) 0 Redis Hget命令 RedisHget命令用于返回哈希表中指定字段的值。 语法 127.0.0.1:6379> HGET KEY_NAME FIELD_NAME 返回值 返回给定字段的值。如果给定的字段或key不存在时，返回nil 示例 127.0.0.1:6379> HSET site redis redis.com (integer) 1 127.0.0.1:6379> HGET site redis \"redis.com\" 127.0.0.1:6379> HGET site mysql (nil) Redis Hgetall命令 RedisHgetall命令用于返回哈希表中，所有的字段和值。 在返回值里，紧跟每个字段名(field_name)之后是字段的值(value)，所以返回值的长度是哈希表大小的两倍。 语法 127.0.0.1:6379> HGETALL KEY_NAME 返回值 以列表形式返回哈希表的字段及字段值 若key不存在，返回空列表 示例 127.0.0.1:6379> HSET myhash field1 \"Hello\" (integer) 1 127.0.0.1:6379> HSET myhash field2 \"World\" (integer) 1 127.0.0.1:6379> HGETALL myhash 1) \"field1\" 2) \"Hello\" 3) \"field2\" 4) \"World\" Redis Hincrby命令 Redis Hincrby命令用于为哈希表中的字段值加上指定增量值。 增量也可以为负数，相当于对指定字段进行减法操作。 如果哈希表的key不存在，一个新的哈希表被创建并执行HINCRBY命令。 如果指定的字段不存在，那么在执行命令前，字段的值被初始化为0。 对一个储存字符串值的字段执行`HINCRBY命令将造成一个错误。 本操作的值被限制在64位(bit)有符号数字表示之内。 语法 127.0.0.1:6379> HINCRBY KEY_NAME FIELD_NAME INCR_BY_NUMBER 返回值 执行HINCRBY命令之后，哈希表中字段的值 示例 127.0.0.1:6379> HSET myhash field 5 (integer) 1 127.0.0.1:6379> HINCRBY myhash field 1 (integer) 6 127.0.0.1:6379> HINCRBY myhash field -1 (integer) 5 127.0.0.1:6379> HINCRBY myhash field -10 (integer) -5 Redis Hincrbyfloat命令 Redis Hincrbyfloat命令用于为哈希表中的字段值加上指定浮点数增量值。 如果指定的字段不存在，那么在执行命令前，字段的值被初始化为0。 语法 127.0.0.1:6379> HINCRBYFLOAT KEY_NAME FIELD_NAME INCR_BY_NUMBER 返回值 执行Hincrbyfloat命令之后，哈希表中字段的值 示例 127.0.0.1:6379> HSET mykey field 10.50 (integer) 1 127.0.0.1:6379> HINCRBYFLOAT mykey field 0.1 \"10.60000000000000001\" 127.0.0.1:6379> HINCRBYFLOAT mykey field -5 \"5.59999999999999964\" 127.0.0.1:6379> HSET mykey field 5.0e3 (integer) 0 127.0.0.1:6379> HINCRBYFLOAT mykey field 2.0e2 \"5200\" Redis Hkeys命令 Redis Hkeys命令用于获取哈希表中的所有域（field）。 语法 127.0.0.1:6379> HKEYS key 返回值 包含哈希表中所有域（field）列表。当key不存在时，返回一个空列表 示例 127.0.0.1:6379> HSET myhash field1 \"foo\" (integer) 1 127.0.0.1:6379> HSET myhash field2 \"bar\" (integer) 1 127.0.0.1:6379> HKEYS myhash 1) \"field1\" 2) \"field2\" Redis Hlen命令 Redis Hlen命令用于获取哈希表中字段的数量。 语法 127.0.0.1:6379> HLEN KEY_NAME 返回值 哈希表中字段的数量。当key不存在时，返回0 示例 127.0.0.1:6379> HSET myhash field1 \"foo\" (integer) 1 127.0.0.1:6379> HSET myhash field2 \"bar\" (integer) 1 127.0.0.1:6379> HLEN myhash (integer) 2 Redis Hmget命令 Redis Hmget命令用于返回哈希表中，一个或多个给定字段的值。 如果指定的字段不存在于哈希表，那么返回一个nil值。 语法 127.0.0.1:6379> HMGET KEY_NAME FIELD1...FIELDN 返回值 一个包含多个给定字段关联值的表，表值的排列顺序和指定字段的请求顺序一样 示例 127.0.0.1:6379> HSET myhash field1 \"foo\" (integer) 1 127.0.0.1:6379> HSET myhash field2 \"bar\" (integer) 1 127.0.0.1:6379> HMGET myhash field1 field2 nofield 1) \"foo\" 2) \"bar\" 3) (nil) Redis Hmset命令 Redis Hmset命令用于同时将多个field-value(字段-值)对设置到哈希表中。 此命令会覆盖哈希表中已存在的字段。 如果哈希表不存在，会创建一个空哈希表，并执行HMSET操作。 语法 127.0.0.1:6379> HMSET KEY_NAME FIELD1 VALUE1 ...FIELDN VALUEN 返回值 如果命令执行成功，返回OK 示例 127.0.0.1:6379> HMSET myhash field1 \"Hello\" field2 \"World\" OK 127.0.0.1:6379> HGET myhash field1 \"Hello\" 127.0.0.1:6379> HGET myhash field2 \"World\" Redis Hset命令 Redis Hset命令用于为哈希表中的字段赋值 。 如果哈希表不存在，一个新的哈希表被创建并进行HSET操作。 如果字段已经存在于哈希表中，旧值将被覆盖。 语法 127.0.0.1:6379> HSET KEY_NAME FIELD VALUE 返回值 如果字段是哈希表中的一个新建字段，并且值设置成功，返回1 如果哈希表中域字段已经存在且旧值已被新值覆盖，返回0 示例 127.0.0.1:6379> HSET myhash field1 \"foo\" OK 127.0.0.1:6379> HGET myhash field1 \"foo\" 127.0.0.1:6379> HSET website google \"www.g.cn\" (integer) 1 127.0.0.1:6379> HSET website google \"www.google.com\" (integer) 0 Redis Hsetnx命令 Redis Hsetnx命令用于为哈希表中不存在的的字段赋值 。 如果哈希表不存在，一个新的哈希表被创建并进行HSET操作。 如果字段已经存在于哈希表中，操作无效。 如果key不存在，一个新哈希表被创建并执行HSETNX命令。 语法 127.0.0.1:6379> HSETNX KEY_NAME FIELD VALUE 返回值 设置成功，返回1 如果给定字段已经存在且没有操作被执行，返回0 示例 127.0.0.1:6379> HSETNX myhash field1 \"foo\" (integer) 1 127.0.0.1:6379> HSETNX myhash field1 \"bar\" (integer) 0 127.0.0.1:6379> HGET myhash field1 \"foo\" 127.0.0.1:6379> HSETNX nosql key-value-store redis (integer) 1 127.0.0.1:6379> HSETNX nosql key-value-store redis (integer) 0 Redis Hvals命令 Redis Hvals命令返回哈希表所有域(field)的值。 语法 127.0.0.1:6379> HVALS KEY_NAME FIELD VALUE 返回值 一个包含哈希表中所有域(field)值的列表。当key不存在时，返回一个空表 示例 127.0.0.1:6379> HSET myhash field1 \"foo\" (integer) 1 127.0.0.1:6379> HSET myhash field2 \"bar\" (integer) 1 127.0.0.1:6379> HVALS myhash 1) \"foo\" 2) \"bar\" 127.0.0.1:6379> EXISTS not_exists (integer) 0 127.0.0.1:6379> HVALS not_exists (empty list or set) "},"command/redis-list.html":{"url":"command/redis-list.html","title":"Redis列表命令","keywords":"","body":"Redis列表命令 Redis列表是简单的字符串列表，按照插入顺序排序。你可以添加一个元素到列表的头部（左边）或者尾部（右边）。 一个列表最多可以包含 232−12^{32} - 12​32​​−1 个元素(超过40亿)。 Redis Blpop命令 Redis Blpop命令移出并获取列表的第一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。 语法 127.0.0.1:6379> BLPOP LIST1 LIST2 .. LISTN TIMEOUT 返回值 如果列表为空，返回一个nil和等待时长 否则，返回一个含有两个元素的列表，第一个元素是被弹出元素所属的key，第二个元素是被弹出元素的值 示例 127.0.0.1:6379> BLPOP list1 100 (nil) (100.05s) Redis Brpop命令 Redis Brpop命令移出并获取列表的最后一个元素，如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。 语法 127.0.0.1:6379> BRPOP LIST1 LIST2 .. LISTN TIMEOUT 返回值 假如在指定时间内没有任何元素被弹出，则返回一个nil和等待时长 反之，返回一个含有两个元素的列表，第一个元素是被弹出元素所属的key，第二个元素是被弹出元素的值 示例 127.0.0.1:6379> BRPOP list1 100 (nil) (100.06s) Redis Brpoplpush命令 Redis Brpoplpush命令从列表中弹出一个值，将弹出的元素插入到另外一个列表中并返回它；如果列表没有元素会阻塞列表直到等待超时或发现可弹出元素为止。 语法 127.0.0.1:6379> BRPOPLPUSH LIST1 ANOTHER_LIST TIMEOUT 返回值 假如在指定时间内没有任何元素被弹出，则返回一个nil和等待时长 反之，返回一个含有两个元素的列表，第一个元素是被弹出元素的值，第二个元素是等待时长 示例 127.0.0.1:6379> BRPOPLPUSH msg reciver 500 \"hello world\" (3.38s) Redis Lindex命令 Redis Lindex命令用于通过索引获取列表中的元素。你也可以使用负数下标，以-1表示列表的最后一个元素，-2表示列表的倒数第二个元素，以此类推。 语法 127.0.0.1:6379> LINDEX KEY_NAME INDEX_POSITION 返回值 列表中下标为指定索引值的元素 如果指定索引值不在列表的区间范围内，返回nil 示例 127.0.0.1:6379> LPUSH mylist \"World\" (integer) 1 127.0.0.1:6379> LPUSH mylist \"Hello\" (integer) 2 127.0.0.1:6379> LINDEX mylist 0 \"Hello\" 127.0.0.1:6379> LINDEX mylist -1 \"World\" 127.0.0.1:6379> LINDEX mylist 3 (nil) Redis Linsert命令 Redis Linsert命令用于在列表的元素前或者后插入元素。当指定元素不存在于列表中时，不执行任何操作。当列表不存在时，被视为空列表，不执行任何操作。如果key不是列表类型，返回一个错误。 语法 127.0.0.1:6379> LINSERT KEY_NAME BEFORE EXISTING_VALUE NEW_VALUE 返回值 如果命令执行成功，返回插入操作完成之后，列表的长度 如果没有找到指定元素，返回-1 如果key不存在或为空列表，返回0 示例 127.0.0.1:6379> RPUSH mylist \"World\" (integer) 2 127.0.0.1:6379> LINSERT mylist BEFORE \"World\" \"There\" (integer) 3 127.0.0.1:6379> LRANGE mylist 0 -1 1) \"Hello\" 2) \"There\" 3) \"World\" Redis Llen命令 Redis Llen命令用于返回列表的长度。如果列表key不存在，则key被解释为一个空列表，返回0。如果key不是列表类型，返回一个错误。 语法 127.0.0.1:6379> LLEN KEY_NAME 返回值 列表的长度 示例 127.0.0.1:6379> RPUSH list1 \"foo\" (integer) 1 127.0.0.1:6379> RPUSH list1 \"bar\" (integer) 2 127.0.0.1:6379> LLEN list1 (integer) 2 Redis Lpop命令 Redis Lpop命令用于移除并返回列表的第一个元素。 语法 127.0.0.1:6379> LPOP KEY_NAME 返回值 列表的第一个元素 当列表key不存在时，返回nil 示例 127.0.0.1:6379> RPUSH list1 \"foo\" (integer) 1 127.0.0.1:6379> RPUSH list1 \"bar\" (integer) 2 127.0.0.1:6379> LPOP list1 \"foo\" Redis Lpush命令 Redis Lpush命令将一个或多个值插入到列表头部。如果key不存在，一个空列表会被创建并执行LPUSH操作。当key存在但不是列表类型时，返回一个错误。 语法 127.0.0.1:6379> LPUSH KEY_NAME VALUE1.. VALUEN 返回值 执行LPUSH命令后，列表的长度 示例 127.0.0.1:6379> LPUSH list1 \"foo\" (integer) 1 127.0.0.1:6379> LPUSH list1 \"bar\" (integer) 2 127.0.0.1:6379> LRANGE list1 0 -1 1) \"bar\" 2) \"foo\" Redis Lpushx命令 Redis Lpushx将一个值插入到已存在的列表头部，列表不存在时操作无效。 语法 127.0.0.1:6379> LPUSHX KEY_NAME VALUE1.. VALUEN 返回值 LPUSHX命令执行之后，列表的长度 示例 127.0.0.1:6379> LPUSH list1 \"foo\" (integer) 1 127.0.0.1:6379> LPUSHX list1 \"bar\" (integer) 2 127.0.0.1:6379> LPUSHX list2 \"bar\" (integer) 0 127.0.0.1:6379> LRANGE list1 0 -1 1) \"bar\" 2) \"foo\" Redis Lrange命令 Redis Lrange返回列表中指定区间内的元素，区间以偏移量START和END指定。 其中0表示列表的第一个元素，1表示列表的第二个元素，以此类推。你也可以使用负数下标，以-1表示列表的最后一个元素，-2表示列表的倒数第二个元素，以此类推。 语法 127.0.0.1:6379> LRANGE KEY_NAME START END 返回值 一个列表，包含指定区间内的元素 示例 127.0.0.1:6379> RPUSH mylist \"two\" (integer) 2 127.0.0.1:6379> RPUSH mylist \"three\" (integer) 3 127.0.0.1:6379> LRANGE mylist 0 0 1) \"one\" 127.0.0.1:6379> LRANGE mylist -3 2 1) \"one\" 2) \"two\" 3) \"three\" 127.0.0.1:6379> LRANGE mylist -100 100 1) \"one\" 2) \"two\" 3) \"three\" 127.0.0.1:6379> LRANGE mylist 5 10 (empty list or set) Redis Lrem命令 Redis Lrem根据参数COUNT的值，移除列表中与参数VALUE相等的元素。 COUNT 的值可以是以下几种： count>0count > 0count>0: 从表头开始向表尾搜索，移除与VALUE相等的元素，数量为COUNT。 count0count count0: 从表尾开始向表头搜索，移除与VALUE相等的元素，数量为COUNT的绝对值。 count=0count = 0count=0: 移除表中所有与VALUE相等的值。 语法 127.0.0.1:6379> LREM KEY_NAME COUNT VALUE 返回值 被移除元素的数量 列表不存在时返回0 示例 127.0.0.1:6379> RPUSH mylist \"hello\" (integer) 1 127.0.0.1:6379> RPUSH mylist \"hello\" (integer) 2 127.0.0.1:6379> RPUSH mylist \"foo\" (integer) 3 127.0.0.1:6379> RPUSH mylist \"hello\" (integer) 4 127.0.0.1:6379> LREM mylist -2 \"hello\" (integer) 2 Redis Lset命令 Redis Lset通过索引来设置元素的值。 当索引参数超出范围，或对一个空列表进行 LSET时，返回一个错误。 关于列表下标的更多信息，请参考LINDEX命令。 语法 127.0.0.1:6379> LSET KEY_NAME INDEX VALUE 返回值 操作成功返回ok，否则返回错误信息 示例 127.0.0.1:6379> RPUSH mylist \"hello\" (integer) 1 127.0.0.1:6379> RPUSH mylist \"hello\" (integer) 2 127.0.0.1:6379> RPUSH mylist \"foo\" (integer) 3 127.0.0.1:6379> RPUSH mylist \"hello\" (integer) 4 127.0.0.1:6379> LSET mylist 0 \"bar\" OK 127.0.0.1:6379> LRANGE mylist 0 -1 1: \"bar\" 2) \"hello\" 3) \"foo\" 4) \"hello\" Redis Ltrim命令 Redis Ltrim对一个列表进行修剪(trim)，就是说，让列表只保留指定区间内的元素，不在指定区间之内的元素都将被删除。 下标0表示列表的第一个元素，以1表示列表的第二个元素，以此类推。你也可以使用负数下标，以-1表示列表的最后一个元素，-2表示列表的倒数第二个元素，以此类推。 语法 127.0.0.1:6379> LTRIM KEY_NAME START STOP 返回值 命令执行成功时，返回ok 示例 127.0.0.1:6379> RPUSH mylist \"hello\" (integer) 1 127.0.0.1:6379> RPUSH mylist \"hello\" (integer) 2 127.0.0.1:6379> RPUSH mylist \"foo\" (integer) 3 127.0.0.1:6379> RPUSH mylist \"bar\" (integer) 4 127.0.0.1:6379> LTRIM mylist 1 -1 OK 127.0.0.1:6379> LRANGE mylist 0 -1 1) \"hello\" 2) \"foo\" 3) \"bar\" Redis Rpop命令 Redis Rpop命令用于移除并返回列表的最后一个元素。 语法 127.0.0.1:6379> RPOP KEY_NAME 返回值 列表的最后一个元素 当列表不存在时，返回nil 示例 127.0.0.1:6379> RPUSH mylist \"one\" (integer) 1 127.0.0.1:6379> RPUSH mylist \"two\" (integer) 2 127.0.0.1:6379> RPUSH mylist \"three\" (integer) 3 127.0.0.1:6379> RPOP mylist \"three\" 127.0.0.1:6379> LRANGE mylist 0 -1 1) \"one\" 2) \"two\" Redis Rpoplpush命令 Redis Rpoplpush命令用于移除列表的最后一个元素，并将该元素添加到另一个列表并返回。 语法 127.0.0.1:6379> RPOPLPUSH SOURCE_KEY_NAME DESTINATION_KEY_NAME 返回值 被弹出的元素 示例 127.0.0.1:6379> RPUSH mylist \"hello\" (integer) 1 127.0.0.1:6379> RPUSH mylist \"foo\" (integer) 2 127.0.0.1:6379> RPUSH mylist \"bar\" (integer) 3 127.0.0.1:6379> RPOPLPUSH mylist myotherlist \"bar\" 127.0.0.1:6379> LRANGE mylist 0 -1 1) \"hello\" 2) \"foo\" Redis Rpush命令 Redis Rpush命令用于将一个或多个值插入到列表的尾部(最右边)。 如果列表不存在，一个空列表会被创建并执行RPUSH操作。当列表存在但不是列表类型时，返回一个错误。 语法 127.0.0.1:6379> RPUSH KEY_NAME VALUE1..VALUEN 返回值 执行RPUSH操作后，列表的长度 示例 127.0.0.1:6379> RPUSH mylist \"hello\" (integer) 1 127.0.0.1:6379> RPUSH mylist \"foo\" (integer) 2 127.0.0.1:6379> RPUSH mylist \"bar\" (integer) 3 127.0.0.1:6379> LRANGE mylist 0 -1 1) \"hello\" 2) \"foo\" 3) \"bar\" Redis Rpushx命令 Redis Rpushx命令用于将一个值插入到已存在的列表尾部(最右边)。如果列表不存在，操作无效。 语法 127.0.0.1:6379> RPUSHX KEY_NAME VALUE1..VALUEN 返回值 执行Rpushx操作后，列表的长度 示例 127.0.0.1:6379> RPUSH mylist \"hello\" (integer) 1 127.0.0.1:6379> RPUSH mylist \"foo\" (integer) 2 127.0.0.1:6379> RPUSHX mylist2 \"bar\" (integer) 0 127.0.0.1:6379> LRANGE mylist 0 -1 1) \"hello\" 2) \"foo\" "},"command/redis-set.html":{"url":"command/redis-set.html","title":"Redis集合命令","keywords":"","body":"Redis集合命令 Redis的Set是String类型的无序集合。集合成员是唯一的，这就意味着集合中不能出现重复的数据。 Redis中集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。 集合中最大的成员数为 232−12^{32} - 12​32​​−1(超过40亿)。 Redis Sadd命令 Redis Sadd命令将一个或多个成员元素加入到集合中，已经存在于集合的成员元素将被忽略。 假如集合key不存在，则创建一个只包含添加的元素作成员的集合。 当集合key不是集合类型时，返回一个错误。 语法 127.0.0.1:6379> SADD KEY_NAME VALUE1..VALUEN 返回值 被添加到集合中的新元素的数量，不包括被忽略的元素 示例 127.0.0.1:6379> SADD myset \"hello\" (integer) 1 127.0.0.1:6379> SADD myset \"foo\" (integer) 1 127.0.0.1:6379> SADD myset \"hello\" (integer) 0 127.0.0.1:6379> SMEMBERS myset 1) \"hello\" 2) \"foo\" Redis Scard命令 Redis Scard命令返回集合中元素的数量。 语法 127.0.0.1:6379> SCARD KEY_NAME 返回值 集合的数量 当集合key不存在时，返回0 示例 127.0.0.1:6379> SADD myset \"hello\" (integer) 1 127.0.0.1:6379> SADD myset \"foo\" (integer) 1 127.0.0.1:6379> SADD myset \"hello\" (integer) 0 127.0.0.1:6379> SCARD myset (integer) 2 Redis Sdiff命令 Redis Sdiff命令返回给定集合之间的差集。不存在的集合 key 将视为空集。 差集的结果来自前面的FIRST_KEY，而不是后面的OTHER_KEY1，也不是整个FIRST_KEY OTHER_KEY1..OTHER_KEYN的差集。 语法 127.0.0.1:6379> SDIFF FIRST_KEY OTHER_KEY1..OTHER_KEYN 返回值 包含差集成员的列表 示例 127.0.0.1:6379> SADD key1 \"a\" (integer) 1 127.0.0.1:6379> SADD key1 \"b\" (integer) 1 127.0.0.1:6379> SADD key1 \"c\" (integer) 1 127.0.0.1:6379> SADD key2 \"c\" (integer) 1 127.0.0.1:6379> SADD key2 \"d\" (integer) 1 127.0.0.1:6379> SADD key2 \"e\" (integer) 1 127.0.0.1:6379> SDIFF key1 key2 1) \"a\" 2) \"b\" Redis Sdiffstore命令 Redis Sdiffstore命令将给定集合之间的差集存储在指定的集合中。如果指定的集合key已存在，则会被覆盖。 语法 127.0.0.1:6379> SDIFFSTORE DESTINATION_KEY KEY1..KEYN 返回值 结果集中的元素数量 示例 127.0.0.1:6379> SADD myset \"hello\" (integer) 1 127.0.0.1:6379> SADD myset \"foo\" (integer) 1 127.0.0.1:6379> SADD myset \"bar\" (integer) 1 127.0.0.1:6379> SADD myset2 \"hello\" (integer) 1 127.0.0.1:6379> SADD myset2 \"world\" (integer) 1 127.0.0.1:6379> SDIFFSTORE destset myset myset2 (integer) 2 127.0.0.1:6379> SMEMBERS destset 1) \"foo\" 2) \"bar\" Redis Sinter命令 Redis Sinter命令返回给定所有给定集合的交集。不存在的集合key被视为空集。当给定集合当中有一个空集时，结果也为空集(根据集合运算定律)。 语法 127.0.0.1:6379> SINTER KEY KEY1..KEYN 返回值 交集成员的列表 示例 127.0.0.1:6379> SADD myset \"hello\" (integer) 1 127.0.0.1:6379> SADD myset \"foo\" (integer) 1 127.0.0.1:6379> SADD myset \"bar\" (integer) 1 127.0.0.1:6379> SADD myset2 \"hello\" (integer) 1 127.0.0.1:6379> SADD myset2 \"world\" (integer) 1 127.0.0.1:6379> SINTER myset myset2 1) \"hello\" Redis Sinterstore命令 Redis Sinterstore命令将给定集合之间的交集存储在指定的集合中。如果指定的集合已经存在，则将其覆盖。 语法 127.0.0.1:6379> SINTERSTORE DESTINATION_KEY KEY KEY1..KEYN 返回值 交集成员的列表 示例 127.0.0.1:6379> SADD myset1 \"hello\" (integer) 1 127.0.0.1:6379> SADD myset1 \"foo\" (integer) 1 127.0.0.1:6379> SADD myset1 \"bar\" (integer) 1 127.0.0.1:6379> SADD myset2 \"hello\" (integer) 1 127.0.0.1:6379> SADD myset2 \"world\" (integer) 1 127.0.0.1:6379> SINTERSTORE myset myset1 myset2 (integer) 1 127.0.0.1:6379> SMEMBERS myset 1) \"hello\" Redis Sismember命令 Redis Sismember命令判断成员元素是否是集合的成员。 语法 127.0.0.1:6379> SISMEMBER KEY VALUE 返回值 如果成员元素是集合的成员，返回1 如果成员元素不是集合的成员，或key不存在，返回0 示例 127.0.0.1:6379> SADD myset1 \"hello\" (integer) 1 127.0.0.1:6379> SISMEMBER myset1 \"hello\" (integer) 1 127.0.0.1:6379> SISMEMBER myset1 \"world\" (integer) 0 Redis Smembers命令 Redis Smembers命令返回集合中的所有的成员。不存在的集合key被视为空集合。 语法 127.0.0.1:6379> SMEMBERS KEY_NAME 返回值 集合中的所有成员 示例 127.0.0.1:6379> SADD myset1 \"hello\" (integer) 1 127.0.0.1:6379> SADD myset1 \"world\" (integer) 1 127.0.0.1:6379> SMEMBERS myset1 1) \"World\" 2) \"Hello\" Redis Smove命令 Redis Smove命令将指定成员member元素从source集合移动到destination集合。SMOVE是原子性操作。 如果source集合不存在或不包含指定的member元素，则 SMOVE 命令不执行任何操作，仅返回0。否则，member元素从source集合中被移除，并添加到destination集合中去。 当destination集合已经包含member元素时，SMOVE命令只是简单地将source集合中的member元素删除。 当source或destination不是集合类型时，返回一个错误。 语法 127.0.0.1:6379> SMOVE SOURCE DESTINATION MEMBER 返回值 如果成员元素被成功移除，返回1 如果成员元素不是source集合的成员，并且没有任何操作对destination集合执行，那么返回0 示例 127.0.0.1:6379> SADD myset1 \"hello\" (integer) 1 127.0.0.1:6379> SADD myset1 \"world\" (integer) 1 127.0.0.1:6379> SADD myset1 \"bar\" (integer) 1 127.0.0.1:6379> SADD myset2 \"foo\" (integer) 1 127.0.0.1:6379> SMOVE myset1 myset2 \"bar\" (integer) 1 127.0.0.1:6379> SMEMBERS myset1 1) \"World\" 2) \"Hello\" 127.0.0.1:6379> SMEMBERS myset2 1) \"foo\" 2) \"bar\" Redis Spop命令 Redis Spop命令用于移除并返回集合中的一个随机元素。 语法 127.0.0.1:6379> SPOP KEY_NAME 返回值 被移除的随机元素 当集合不存在或是空集时，返回nil 示例 127.0.0.1:6379> SADD myset1 \"hello\" (integer) 1 127.0.0.1:6379> SADD myset1 \"world\" (integer) 1 127.0.0.1:6379> SADD myset1 \"bar\" (integer) 1 127.0.0.1:6379> SPOP myset1 \"bar\" 127.0.0.1:6379> SMEMBERS myset1 1) \"Hello\" 2) \"world\" Redis Srandmember命令 Redis Srandmember命令用于返回集合中的一个随机元素。 从Redis 2.6版本开始，Srandmember命令接受可选的count参数： 如果count为正数，且小于集合基数，那么命令返回一个包含count个元素的数组，数组中的元素各不相同。如果count大于等于集合基数，那么返回整个集合。 如果count为负数，那么命令返回一个数组，数组中的元素可能会重复出现多次，而数组的长度为count的绝对值。 该操作和SPOP相似，但SPOP将随机元素从集合中移除并返回，而Srandmember则仅仅返回随机元素，而不对集合进行任何改动。 语法 127.0.0.1:6379> SRANDMEMBER KEY [count] 返回值 只提供集合key参数时，返回一个元素 如果集合为空，返回nil 如果提供了count参数，那么返回一个数组；如果集合为空，返回空数组 示例 127.0.0.1:6379> SADD myset1 \"hello\" (integer) 1 127.0.0.1:6379> SADD myset1 \"world\" (integer) 1 127.0.0.1:6379> SADD myset1 \"bar\" (integer) 1 127.0.0.1:6379> SRANDMEMBER myset1 \"bar\" 127.0.0.1:6379> SRANDMEMBER myset1 2 1) \"Hello\" 2) \"world\" Redis Srem命令 Redis Srem命令用于移除集合中的一个或多个成员元素，不存在的成员元素会被忽略。 当key不是集合类型，返回一个错误。 语法 127.0.0.1:6379> SREM KEY MEMBER1..MEMBERN 返回值 被成功移除的元素的数量，不包括被忽略的元素 示例 127.0.0.1:6379> SADD myset1 \"hello\" (integer) 1 127.0.0.1:6379> SADD myset1 \"world\" (integer) 1 127.0.0.1:6379> SADD myset1 \"bar\" (integer) 1 127.0.0.1:6379> SREM myset1 \"hello\" (integer) 1 127.0.0.1:6379> SREM myset1 \"foo\" (integer) 0 127.0.0.1:6379> SMEMBERS myset1 1) \"bar\" 2) \"world\" Redis Sunion命令 Redis Sunion命令返回给定集合的并集。不存在的集合key被视为空集。 语法 127.0.0.1:6379> SUNION KEY KEY1..KEYN 返回值 并集成员的列表 示例 127.0.0.1:6379> SADD key1 \"a\" (integer) 1 127.0.0.1:6379> SADD key1 \"b\" (integer) 1 127.0.0.1:6379> SADD key1 \"c\" (integer) 1 127.0.0.1:6379> SADD key2 \"c\" (integer) 1 127.0.0.1:6379> SADD key2 \"d\" (integer) 1 127.0.0.1:6379> SADD key2 \"e\" (integer) 1 127.0.0.1:6379> SUNION key1 key2 1) \"a\" 2) \"c\" 3) \"b\" 4) \"e\" 5) \"d\" Redis Sunionstore命令 Redis Sunionstore命令将给定集合的并集存储在指定的集合destination中。如果destination已经存在，则将其覆盖。 语法 127.0.0.1:6379> SUNIONSTORE DESTINATION KEY KEY1..KEYN 返回值 结果集中的元素数量 示例 127.0.0.1:6379> SADD myset1 \"hello\" (integer) 1 127.0.0.1:6379> SADD myset1 \"world\" (integer) 1 127.0.0.1:6379> SADD myset1 \"bar\" (integer) 1 127.0.0.1:6379> SADD myset2 \"hello\" (integer) 1 127.0.0.1:6379> SADD myset2 \"bar\" (integer) 1 127.0.0.1:6379> SUNIONSTORE myset myset1 myset2 (integer) 1 127.0.0.1:6379> SMEMBERS myset 1) \"bar\" 2) \"world\" 3) \"hello\" 4) \"foo\" "},"command/redis-sorted-set.html":{"url":"command/redis-sorted-set.html","title":"Redis有序集合命令","keywords":"","body":"Redis有序集合命令 Redis有序集合和集合一样也是string类型元素的集合,且不允许重复的成员。 不同的是每个元素都会关联一个double类型的分数。redis正是通过分数来为集合中的成员进行从小到大的排序。 有序集合的成员是唯一的，但分数(score)却可以重复。 集合是通过哈希表实现的，所以添加，删除，查找的复杂度都是O(1)。集合中最大的成员数为 232−12^{32} - 12​32​​−1 (超过40亿)。 Redis Zadd命令 Redis Zadd命令用于将一个或多个成员元素及其分数值加入到有序集当中。 如果某个成员已经是有序集的成员，那么更新这个成员的分数值，并通过重新插入这个成员元素，来保证该成员在正确的位置上。 分数值可以是整数值或双精度浮点数。 如果有序集合key不存在，则创建一个空的有序集并执行ZADD操作。 当key存在但不是有序集类型时，返回一个错误。 语法 127.0.0.1:6379> ZADD KEY_NAME SCORE1 VALUE1.. SCOREN VALUEN 返回值 被成功添加的新成员的数量，不包括那些被更新的、已经存在的成员 示例 127.0.0.1:6379> ZADD myzset 1 \"one\" (integer) 1 127.0.0.1:6379> ZADD myzset 1 \"uno\" (integer) 1 127.0.0.1:6379> ZADD myzset 2 \"two\" 3 \"three\" (integer) 2 127.0.0.1:6379> ZRANGE myzset 0 -1 WITHSCORES 1) \"one\" 2) \"1\" 3) \"uno\" 4) \"1\" 5) \"two\" 6) \"2\" 7) \"three\" 8) \"3\" Redis Zcard命令 Redis Zcard命令用于计算集合中元素的数量。 语法 127.0.0.1:6379> ZCARD KEY_NAME 返回值 当key存在且是有序集类型时，返回有序集的基数 当key不存在时，返回0 示例 127.0.0.1:6379> ZADD myzset 1 \"one\" (integer) 1 127.0.0.1:6379> ZADD myzset 2 \"two\" (integer) 1 127.0.0.1:6379> ZCARD myzset (integer) 2 Redis Zcount命令 Redis Zcount命令用于计算有序集合中指定分数区间的成员数量。 语法 127.0.0.1:6379> ZCOUNT key min max 返回值 分数值在min和max之间的成员的数量 示例 127.0.0.1:6379> ZADD myzset 1 \"hello\" (integer) 1 127.0.0.1:6379> ZADD myzset 1 \"foo\" (integer) 1 127.0.0.1:6379> ZADD myzset 2 \"world\" 3 \"bar\" (integer) 2 127.0.0.1:6379> ZCOUNT myzset 1 3 (integer) 4 Redis Zincrby命令 Redis Zincrby命令对有序集合中指定成员的分数加上增量increment。 可以通过传递一个负数值increment，让分数减去相应的值，比如ZINCRBY key -5 member，就是让member的score值减去5。 当key不存在，或分数不是key的成员时，ZINCRBY key increment member等同于ZADD key increment member。 当key不是有序集类型时，返回一个错误。 分数值可以是整数值或双精度浮点数。 语法 127.0.0.1:6379> ZINCRBY key increment member 返回值 member成员的新分数值，以字符串形式表示 示例 127.0.0.1:6379> ZADD myzset 1 \"one\" (integer) 1 127.0.0.1:6379> ZADD myzset 2 \"two\" (integer) 1 127.0.0.1:6379> ZINCRBY myzset 2 \"one\" \"3\" 127.0.0.1:6379> ZRANGE myzset 0 -1 WITHSCORES 1) \"two\" 2) \"2\" 3) \"one\" 4) \"3\" Redis Zinterstore命令 Redis Zinterstore命令计算给定的一个或多个有序集的交集，其中给定key的数量必须以numkeys参数指定，并将该交集(结果集)储存到destination。 默认情况下，结果集中某个成员的分数值是所有给定集下该成员分数值之和。 语法 127.0.0.1:6379> ZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX] 返回值 保存到目标结果集的的成员数量 示例 # 有序集 mid_test 127.0.0.1:6379> ZADD mid_test 70 \"Li Lei\" (integer) 1 127.0.0.1:6379> ZADD mid_test 70 \"Han Meimei\" (integer) 1 127.0.0.1:6379> ZADD mid_test 99.5 \"Tom\" (integer) 1 # 另一个有序集 fin_test 127.0.0.1:6379> ZADD fin_test 88 \"Li Lei\" (integer) 1 127.0.0.1:6379> ZADD fin_test 75 \"Han Meimei\" (integer) 1 127.0.0.1:6379> ZADD fin_test 99.5 \"Tom\" (integer) 1 # 交集 127.0.0.1:6379> ZINTERSTORE sum_point 2 mid_test fin_test (integer) 3 # 显示有序集内所有成员及其分数值 127.0.0.1:6379> ZRANGE sum_point 0 -1 WITHSCORES 1) \"Han Meimei\" 2) \"145\" 3) \"Li Lei\" 4) \"158\" 5) \"Tom\" 6) \"199\" Redis Zlexcount命令 Redis Zlexcount命令在计算有序集合中指定字典区间内成员数量。 语法 127.0.0.1:6379> ZLEXCOUNT KEY MIN MAX 返回值 指定区间内的成员数量 示例 127.0.0.1:6379> ZADD myzset 0 a 0 b 0 c 0 d 0 e (integer) 5 127.0.0.1:6379> ZADD myzset 0 f 0 g (integer) 2 127.0.0.1:6379> ZLEXCOUNT myzset - + (integer) 7 127.0.0.1:6379> ZLEXCOUNT myzset [b [f (integer) 5 Redis Zrange命令 Redis Zrange返回有序集中，指定区间内的成员。 其中成员的位置按分数值递增(从小到大)来排序。 具有相同分数值的成员按字典序(lexicographical order)来排列。 如果你需要成员按值递减(从大到小)来排列，请使用ZREVRANGE命令。 下标参数start和stop都以0为底，也就是说，以0表示有序集第一个成员，以1表示有序集第二个成员，以此类推。 你也可以使用负数下标，以-1表示最后一个成员，-2表示倒数第二个成员，以此类推。 语法 127.0.0.1:6379> ZRANGE key start stop [WITHSCORES] 返回值 指定区间内，带有分数值(可选)的有序集成员的列表 示例 127.0.0.1:6379> ZRANGE salary 0 -1 WITHSCORES 1) \"jack\" 2) \"3500\" 3) \"tom\" 4) \"5000\" 5) \"boss\" 6) \"10086\" 127.0.0.1:6379> ZRANGE salary 1 2 WITHSCORES 1) \"tom\" 2) \"5000\" 3) \"boss\" 4) \"10086\" 127.0.0.1:6379> ZRANGE salary 0 200000 WITHSCORES 1) \"jack\" 2) \"3500\" 3) \"tom\" 4) \"5000\" 5) \"boss\" 6) \"10086\" 127.0.0.1:6379> ZRANGE salary 200000 3000000 WITHSCORES (empty list or set) Redis Zrangebylex命令 Redis Zrangebylex通过字典区间返回有序集合的成员。 语法 127.0.0.1:6379> ZRANGEBYLEX key min max [LIMIT offset count] 返回值 指定区间内的元素列表 示例 127.0.0.1:6379> ZADD myzset 0 a 0 b 0 c 0 d 0 e 0 f 0 g (integer) 7 127.0.0.1:6379> ZRANGEBYLEX myzset - [c 1) \"a\" 2) \"b\" 3) \"c\" 127.0.0.1:6379> ZRANGEBYLEX myzset - (c 1) \"a\" 2) \"b\" 127.0.0.1:6379> ZRANGEBYLEX myzset [aaa (g 1) \"b\" 2) \"c\" 3) \"d\" 4) \"e\" 5) \"f\" Redis Zrangebyscore命令 Redis Zrangebyscore返回有序集合中指定分数区间的成员列表。有序集成员按分数值递增(从小到大)次序排列。 具有相同分数值的成员按字典序来排列(该属性是有序集提供的，不需要额外的计算)。 默认情况下，区间的取值使用闭区间(小于等于或大于等于)，你也可以通过给参数前增加(符号来使用可选的开区间(小于或大于)。 语法 127.0.0.1:6379> ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count] 返回值 指定区间内，带有分数值(可选)的有序集成员的列表 示例 # 测试数据 127.0.0.1:6379> ZADD salary 2500 jack (integer) 0 127.0.0.1:6379> ZADD salary 5000 tom (integer) 0 127.0.0.1:6379> ZADD salary 12000 peter (integer) 0 # 显示整个有序集 127.0.0.1:6379> ZRANGEBYSCORE salary -inf +inf 1) \"jack\" 2) \"tom\" 3) \"peter\" # 显示整个有序集及成员的 score 值 127.0.0.1:6379> ZRANGEBYSCORE salary -inf +inf WITHSCORES 1) \"jack\" 2) \"2500\" 3) \"tom\" 4) \"5000\" 5) \"peter\" 6) \"12000\" # 显示工资 ZRANGEBYSCORE salary -inf 5000 WITHSCORES 1) \"jack\" 2) \"2500\" 3) \"tom\" 4) \"5000\" # 显示工资大于 5000 小于等于 400000 的成员 127.0.0.1:6379> ZRANGEBYSCORE salary (5000 400000 1) \"peter\" Redis Zrank命令 Redis Zrank返回有序集中指定成员的排名。其中有序集成员按分数值递增(从小到大)顺序排列。 语法 127.0.0.1:6379> ZRANK key member 返回值 如果成员是有序集key的成员，返回member的排名 如果成员不是有序集key的成员，返回nil 示例 127.0.0.1:6379> ZRANGE salary 0 -1 WITHSCORES 1) \"peter\" 2) \"3500\" 3) \"tom\" 4) \"4000\" 5) \"jack\" 6) \"5000\" 127.0.0.1:6379> ZRANK salary tom (integer) 1 Redis Zrem命令 Redis Zrem命令用于移除有序集中的一个或多个成员，不存在的成员将被忽略。 当key存在但不是有序集类型时，返回一个错误。 语法 127.0.0.1:6379> ZREM key member [member ...] 返回值 被成功移除的成员的数量，不包括被忽略的成员 示例 # 测试数据 127.0.0.1:6379> ZRANGE page_rank 0 -1 WITHSCORES 1) \"bing.com\" 2) \"8\" 3) \"baidu.com\" 4) \"9\" 5) \"google.com\" 6) \"10\" # 移除单个元素 127.0.0.1:6379> ZREM page_rank google.com (integer) 1 127.0.0.1:6379> ZRANGE page_rank 0 -1 WITHSCORES 1) \"bing.com\" 2) \"8\" 3) \"baidu.com\" 4) \"9\" # 移除多个元素 127.0.0.1:6379> ZREM page_rank baidu.com bing.com (integer) 2 127.0.0.1:6379> ZRANGE page_rank 0 -1 WITHSCORES (empty list or set) # 移除不存在元素 127.0.0.1:6379> ZREM page_rank non-exists-element (integer) 0 Redis Zremrangebylex命令 Redis Zremrangebylex命令用于移除有序集合中给定的字典区间的所有成员。 语法 127.0.0.1:6379> ZREMRANGEBYLEX key min max 返回值 被成功移除的成员的数量，不包括被忽略的成员 示例 127.0.0.1:6379> ZADD myzset 0 aaaa 0 b 0 c 0 d 0 e (integer) 5 127.0.0.1:6379> ZADD myzset 0 foo 0 zap 0 zip 0 ALPHA 0 alpha (integer) 5 127.0.0.1:6379> ZRANGE myzset 0 -1 1) \"ALPHA\" 2) \"aaaa\" 3) \"alpha\" 4) \"b\" 5) \"c\" 6) \"d\" 7) \"e\" 8) \"foo\" 9) \"zap\" 10) \"zip\" 127.0.0.1:6379> ZREMRANGEBYLEX myzset [alpha [omega (integer) 6 127.0.0.1:6379> ZRANGE myzset 0 -1 1) \"ALPHA\" 2) \"aaaa\" 3) \"zap\" 4) \"zip\" Redis Zremrangebyrank命令 Redis Zremrangebyrank命令用于移除有序集中，指定排名(rank)区间内的所有成员。 语法 127.0.0.1:6379> ZREMRANGEBYRANK key start stop 返回值 被移除成员的数量 示例 127.0.0.1:6379> ZADD salary 2000 jack (integer) 1 127.0.0.1:6379> ZADD salary 5000 tom (integer) 1 127.0.0.1:6379> ZADD salary 3500 peter (integer) 1 127.0.0.1:6379> ZREMRANGEBYRANK salary 0 1 (integer) 2 127.0.0.1:6379> ZRANGE salary 0 -1 WITHSCORES 1) \"tom\" 2) \"5000\" Redis Zremrangebyscore命令 Redis Zremrangebyscore命令用于移除有序集中，指定分数（score）区间内的所有成员。 语法 127.0.0.1:6379> ZREMRANGEBYSCORE key min max 返回值 被移除成员的数量 示例 127.0.0.1:6379> ZRANGE salary 0 -1 WITHSCORES 1) \"tom\" 2) \"2000\" 3) \"peter\" 4) \"3500\" 5) \"jack\" 6) \"5000\" 127.0.0.1:6379> ZREMRANGEBYSCORE salary 1500 3500 (integer) 2 127.0.0.1:6379> ZRANGE salary 0 -1 WITHSCORES 1) \"jack\" 2) \"5000\" Redis Zrevrange命令 Redis Zrevrange命令返回有序集中，指定区间内的成员。 其中成员的位置按分数值递减(从大到小)来排列。 具有相同分数值的成员按字典序的逆序(reverse lexicographical order)排列。 除了成员按分数值递减的次序排列这一点外，ZREVRANGE命令的其他方面和ZRANGE命令一样。 语法 127.0.0.1:6379> ZREVRANGE key start stop [WITHSCORES] 返回值 指定区间内，带有分数值(可选)的有序集成员的列表 示例 127.0.0.1:6379> ZRANGE salary 0 -1 WITHSCORES 1) \"peter\" 2) \"3500\" 3) \"tom\" 4) \"4000\" 5) \"jack\" 6) \"5000\" 127.0.0.1:6379> ZREVRANGE salary 0 -1 WITHSCORES 1) \"jack\" 2) \"5000\" 3) \"tom\" 4) \"4000\" 5) \"peter\" 6) \"3500\" Redis Zrevrangebyscore命令 Redis Zrevrangebyscore返回有序集中指定分数区间内的所有的成员。有序集成员按分数值递减(从大到小)的次序排列。 具有相同分数值的成员按字典序的逆序(reverse lexicographical order)排列。 除了成员按分数值递减的次序排列这一点外，ZREVRANGEBYSCORE命令的其他方面和ZRANGEBYSCORE命令一样。 语法 127.0.0.1:6379> ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count] 返回值 指定区间内，带有分数值(可选)的有序集成员的列表 示例 127.0.0.1:6379> ZADD salary 10086 jack (integer) 1 > ZADD salary 5000 tom (integer) 1 127.0.0.1:6379> ZADD salary 7500 peter (integer) 1 127.0.0.1:6379> ZADD salary 3500 joe (integer) 1 127.0.0.1:6379> ZREVRANGEBYSCORE salary +inf -inf 1) \"jack\" 2) \"peter\" 3) \"tom\" 4) \"joe\" 127.0.0.1:6379> ZREVRANGEBYSCORE salary 10000 2000 1) \"peter\" 2) \"tom\" 3) \"joe\" Redis Zrevrank命令 Redis Zrevrank命令返回有序集中成员的排名。其中有序集成员按分数值递减(从大到小)排序。 排名以0为底，也就是说，分数值最大的成员排名为0。 使用ZRANK命令可以获得成员按分数值递增(从小到大)排列的排名。 语法 127.0.0.1:6379> ZREVRANK key member 返回值 如果成员是有序集key的成员，返回成员的排名 如果成员不是有序集key的成员，返回nil 示例 127.0.0.1:6379> ZRANGE salary 0 -1 WITHSCORES 1) \"jack\" 2) \"2000\" 3) \"peter\" 4) \"3500\" 5) \"tom\" 6) \"5000\" 127.0.0.1:6379> ZREVRANK salary peter (integer) 1 127.0.0.1:6379> ZREVRANK salary tom (integer) 0 Redis Zscore命令 Redis Zscore命令返回有序集中，成员的分数值。如果成员元素不是有序集key的成员，或key不存在，返回nil。 语法 127.0.0.1:6379> ZSCORE key member 返回值 成员的分数值，以字符串形式表示 示例 127.0.0.1:6379> ZRANGE salary 0 -1 WITHSCORES 1) \"tom\" 2) \"2000\" 3) \"peter\" 4) \"3500\" 5) \"jack\" 6) \"5000\" 127.0.0.1:6379> ZSCORE salary peter \"3500\" Redis Zunionstore命令 Redis Zunionstore命令计算给定的一个或多个有序集的并集，其中给定key的数量必须以numkeys参数指定，并将该并集(结果集)储存到destination。 默认情况下，结果集中某个成员的分数值是所有给定集下该成员分数值之和。 语法 127.0.0.1:6379> ZUNIONSTORE destination numkeys key [key ...] [WEIGHTS weight [weight ...]] [AGGREGATE SUM|MIN|MAX] 返回值 保存到destination的结果集的成员数量 示例 127.0.0.1:6379> ZRANGE programmer 0 -1 WITHSCORES 1) \"peter\" 2) \"2000\" 3) \"jack\" 4) \"3500\" 5) \"tom\" 6) \"5000\" 127.0.0.1:6379> ZRANGE manager 0 -1 WITHSCORES 1) \"herry\" 2) \"2000\" 3) \"mary\" 4) \"3500\" 5) \"bob\" 6) \"4000\" 127.0.0.1:6379> ZUNIONSTORE salary 2 programmer manager WEIGHTS 1 3 (integer) 6 127.0.0.1:6379> ZRANGE salary 0 -1 WITHSCORES 1) \"peter\" 2) \"2000\" 3) \"jack\" 4) \"3500\" 5) \"tom\" 6) \"5000\" 7) \"herry\" 8) \"6000\" 9) \"mary\" 10) \"10500\" 11) \"bob\" 12) \"12000\" "},"command/redis-pub-sub.html":{"url":"command/redis-pub-sub.html","title":"Redis发布订阅命令","keywords":"","body":"Redis发布订阅命令 Redis 发布订阅(pub/sub)是一种消息通信模式：发送者(pub)发送消息，订阅者(sub)接收消息。 Redis 客户端可以订阅任意数量的频道。 Redis Psubscribe命令 Redis Psubscribe 命令订阅一个或多个符合给定模式的频道。 每个模式以*作为匹配符，比如it*匹配所有以it开头的频道(it.news、it.blog、it.tweets等等)。news.*匹配所有以news.开头的频道(news.it、news.global.today等等)，诸如此类。 语法 127.0.0.1:6379> PSUBSCRIBE pattern [pattern ...] 返回值 接收到的信息 示例 127.0.0.1:6379> PSUBSCRIBE mychannel Reading messages... (press Ctrl-C to quit) 1) \"psubscribe\" 2) \"mychannel\" 3) (integer) 1 Redis Pubsub命令 Redis Pubsub命令用于查看订阅与发布系统状态，它由数个不同格式的子命令组成。 语法 127.0.0.1:6379> PUBSUB [argument [argument ...]] 返回值 由活跃频道组成的列表 示例 127.0.0.1:6379> PUBSUB CHANNELS (empty list or set) Redis Publish命令 Redis Publish命令用于将信息发送到指定的频道。 语法 127.0.0.1:6379> PUBLISH channel message 返回值 接收到信息的订阅者数量 示例 127.0.0.1:6379> PUBLISH mychannel \"hello, i m here\" (integer) 1 Redis Punsubscribe命令 Redis Punsubscribe命令用于退订所有给定模式的频道。 语法 127.0.0.1:6379> PUNSUBSCRIBE [pattern [pattern ...]] 返回值 这个命令在不同的客户端中有不同的表现 示例 127.0.0.1:6379> PUNSUBSCRIBE mychannel 1) \"punsubscribe\" 2) \"a\" 3) (integer) 1 Redis Subscribe命令 Redis Subscribe命令用于订阅给定的一个或多个频道的信息。 语法 127.0.0.1:6379> SUBSCRIBE channel [channel ...] 返回值 接收到的信息 示例 127.0.0.1:6379> SUBSCRIBE mychannel Reading messages... (press Ctrl-C to quit) 1) \"subscribe\" 2) \"mychannel\" 3) (integer) 1 1) \"message\" 2) \"mychannel\" 3) \"a\" Redis Unsubscribe命令 Redis Unsubscribe命令用于退订给定的一个或多个频道的信息。 语法 127.0.0.1:6379> UNSUBSCRIBE channel [channel ...] 返回值 这个命令在不同的客户端中有不同的表现 示例 127.0.0.1:6379> UNSUBSCRIBE mychannel 1) \"unsubscribe\" 2) \"a\" 3) (integer) 0 "},"command/redis-transaction.html":{"url":"command/redis-transaction.html","title":"Redis事务命令","keywords":"","body":"Redis事务命令 Redis事务可以一次执行多个命令，并且带有以下两个重要的保证： 批量操作在发送EXEC命令前被放入队列缓存。 收到EXEC命令后进入事务执行，事务中任意命令执行失败，其余的命令依然被执行。 在事务执行过程，其他客户端提交的命令请求不会插入到事务执行命令序列中。 一个事务从开始到执行会经历以下三个阶段： 开始事务。 命令入队。 执行事务。 Redis Discard命令 Redis Discard命令用于取消事务，放弃执行事务块内的所有命令。 语法 127.0.0.1:6379> DISCARD 返回值 总是返回OK 示例 127.0.0.1:6379> MULTI OK 127.0.0.1:6379> PING QUEUED 127.0.0.1:6379> SET greeting \"hello\" QUEUED 127.0.0.1:6379> DISCARD OK Redis Exec命令 Redis Exec命令用于执行所有事务块内的命令。 语法 127.0.0.1:6379> EXEC 返回值 事务块内所有命令的返回值，按命令执行的先后顺序排列。当操作被打断时，返回空值nil 示例 # 事务被成功执行 127.0.0.1:6379> MULTI OK 127.0.0.1:6379> INCR user_id QUEUED 127.0.0.1:6379> INCR user_id QUEUED 127.0.0.1:6379> INCR user_id QUEUED 127.0.0.1:6379> PING QUEUED 127.0.0.1:6379> EXEC 1) (integer) 1 2) (integer) 2 3) (integer) 3 4) PONG # 监视 key ，且事务成功执行 127.0.0.1:6379> WATCH lock lock_times OK 127.0.0.1:6379> MULTI OK 127.0.0.1:6379> SET lock \"huangz\" QUEUED 127.0.0.1:6379> INCR lock_times QUEUED 127.0.0.1:6379> EXEC 1) OK 2) (integer) 1 # 监视 key ，且事务被打断 127.0.0.1:6379> WATCH lock lock_times OK 127.0.0.1:6379> MULTI OK 127.0.0.1:6379> SET lock \"joe\" QUEUED 127.0.0.1:6379> INCR lock_times QUEUED 127.0.0.1:6379> EXEC (nil) Redis Multi命令 Redis Multi命令用于标记一个事务块的开始。 事务块内的多条命令会按照先后顺序被放进一个队列当中，最后由EXEC命令原子性(atomic)地执行。 语法 127.0.0.1:6379> MULTI 返回值 总是返回OK 示例 127.0.0.1:6379> MULTI OK 127.0.0.1:6379> INCR user_id QUEUED 127.0.0.1:6379> INCR user_id QUEUED 127.0.0.1:6379> INCR user_id QUEUED 127.0.0.1:6379> PING QUEUED 127.0.0.1:6379> EXEC 1) (integer) 1 2) (integer) 2 3) (integer) 3 4) PONG Redis Unwatch命令 Redis Unwatch命令用于取消WATCH命令对所有key的监视。 语法 127.0.0.1:6379> UNWATCH 返回值 总是返回OK 示例 127.0.0.1:6379> WATCH lock lock_times OK 127.0.0.1:6379> UNWATCH OK Redis Watch命令 Redis Watch命令用于监视一个(或多个)key，如果在事务执行之前这个(或这些)key被其他命令所改动，那么事务将被打断。 语法 127.0.0.1:6379> WATCH key [key ...] 返回值 总是返回OK 示例 127.0.0.1:6379> WATCH lock lock_times OK "},"command/redis-connection.html":{"url":"command/redis-connection.html","title":"Redis连接命令","keywords":"","body":"Redis连接命令 Redis连接命令主要是用于连接redis服务。 Redis Auth命令 RedisAuth命令用于检测给定的密码和配置文件中的密码是否相符。 语法 127.0.0.1:6379> AUTH PASSWORD 返回值 密码匹配时返回OK，否则返回一个错误。 示例 127.0.0.1:6379> AUTH PASSWORD (error) ERR Client sent AUTH, but no password is set 127.0.0.1:6379> CONFIG SET requirepass \"mypass\" OK 127.0.0.1:6379> AUTH mypass Ok 127.0.0.1:6379> AUTH mypass2 (error) ERR invalid password Redis Echo命令 RedisEcho命令用于打印给定的字符串。 语法 127.0.0.1:6379> ECHO message 返回值 返回字符串本身 示例 127.0.0.1:6379> ECHO \"Hello World\" \"Hello World\" Redis Ping命令 RedisPing命令使用客户端向Redis服务器发送一个PING，如果服务器运作正常的话，会返回一个PONG。 通常用于测试与服务器的连接是否仍然生效，或者用于测量延迟值。 语法 127.0.0.1:6379> PING 返回值 如果连接正常就返回一个PONG，否则返回一个连接错误。 示例 127.0.0.1:6379> PING PONG 127.0.0.1:6379> PING Could not connect to Redis at 127.0.0.1:6379: Connection refused Redis Quit命令 RedisQuit命令用于关闭与当前客户端与redis服务的连接。 一旦所有等待中的回复(如果有的话)顺利写入到客户端，连接就会被关闭。 语法 127.0.0.1:6379> QUIT 返回值 总是返回OK 示例 127.0.0.1:6379> QUIT OK Redis Select命令 RedisSelect命令用于切换到指定的数据库，数据库索引号index用数字值指定，以0作为起始索引值。 语法 127.0.0.1:6379> SELECT index 返回值 总是返回OK 示例 127.0.0.1:6379> SELECT 1 OK "},"advance/redis-backup.html":{"url":"advance/redis-backup.html","title":"Redis数据备份与恢复","keywords":"","body":"Redis数据备份与恢复 备份数据 RedisSAVE命令用于创建当前数据库的备份。 语法 127.0.0.1:6379> SAVE 该命令将在redis安装目录中创建dump.rdb文件。 恢复数据 如果需要恢复数据，只需将备份文件(dump.rdb)移动到redis安装目录并启动服务即可。获取redis目录可以使用CONFIG命令，如下所示： 127.0.0.1:6379> CONFIG GET dir 1) \"dir\" 2) \"/usr/local/redis/bin\" 以上命令CONFIG GET dir输出的redis安装目录为/usr/local/redis/bin。 Bgsave 创建redis备份文件也可以使用命令BGSAVE，该命令在后台执行。 127.0.0.1:6379> BGSAVE Background saving started "},"advance/redis-security.html":{"url":"advance/redis-security.html","title":"Redis安全","keywords":"","body":"Redis安全 我们可以通过redis的配置文件设置密码参数，这样客户端连接到redis服务就需要密码验证，这样可以让你的redis服务更安全。 查看和设置密码 127.0.0.1:6379> CONFIG get requirepass 1) \"requirepass\" 2) \"\" 127.0.0.1:6379> CONFIG set requirepass \"mypassword\" OK 127.0.0.1:6379> CONFIG get requirepass 1) \"requirepass\" 2) \"mypassword\" 连接 设置密码后，客户端连接redis服务就需要密码验证，否则无法执行命令。 使用AUTH命令验证密码是否正确。 127.0.0.1:6379> AUTH \"mypassword\" OK 127.0.0.1:6379> SET mykey \"Test value\" OK 127.0.0.1:6379> GET mykey \"Test value\" "}}